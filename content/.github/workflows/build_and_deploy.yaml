name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deployInfrastructure:
    runs-on: ubuntu-latest
    environment: Testing
    steps:
      - name: Prepare Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5
      - name: Setup Terragrunt v0.38.4
        run: |
          sudo wget -q -O /bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.40.2/terragrunt_linux_amd64
          sudo chmod +x /bin/terragrunt
          terragrunt -v
      - name: Terragrunt Init
        working-directory: terragrunt/dev-acc
        run: terragrunt run-all init --terragrunt-non-interactive
      - name: Terragrunt plan
        working-directory: terragrunt/dev-acc
        run: terragrunt run-all plan --terragrunt-non-interactive
      - name: Terragrunt apply
        working-directory: terragrunt/dev-acc
#        if: github.ref_name == 'main' && github.event_name == 'push'
        run: terragrunt run-all apply --terragrunt-non-interactive

#  deployApp:
#    runs-on: ubuntu-latest
#    environment: Testing
#    needs: [deployInfrastructure]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME  }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: "developer-portal-repository"
#          IMAGE_TAG: backstage
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: backstage
#          image: ${{ steps.build-image.outputs.image }}
#      - name: Deploy Amazon ECS task definition
#          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#          with:
#            task-definition: ${{ steps.task-def.outputs.task-definition }}
#            service: backstage
#            cluster: developer-portal-backstage-fargate
#            wait-for-service-stability: true
